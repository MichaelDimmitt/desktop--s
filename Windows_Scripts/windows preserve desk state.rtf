{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 CourierNewPS-BoldMT;\f1\fmodern\fcharset0 CourierNewPSMT;\f2\fmodern\fcharset0 CourierNewPS-ItalicMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red255\green255\blue255;
\red0\green0\blue109;}
{\*\expandedcolortbl;\csgray\c100000;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\csgray\c100000;
\cssrgb\c0\c0\c50196;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl220\partightenfactor0

\f0\b\fs20 \cf2 \cb3 \expnd0\expndtw0\kerning0
//{\field{\*\fldinst{HYPERLINK "http://www.swissdelphicenter.ch/en/showcode.php?id=1897"}}{\fldrslt http://www.swissdelphicenter.ch/en/showcode.php?id=1897}}\
//{\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/131690/how-can-i-programmatically-manipulate-windows-desktop-icon-locations"}}{\fldrslt http://stackoverflow.com/questions/131690/how-can-i-programmatically-manipulate-windows-desktop-icon-locations}}\
uses\cb4 \
\cb3 \'a0\'a0
\f1\b0 CommCtrl,\
\'a0\'a0IPCThrd;\'a0(from\'a0your\'a0Delphi\\Demos\\Ipcdemos\'a0directory)\
\

\f0\b function\'a0
\f1\b0 GetDesktopListViewHandle:\'a0THandle;\

\f0\b var\cb4 \
\cb3 \'a0\'a0
\f1\b0 S:\'a0
\f0\b String
\f1\b0 ;\

\f0\b begin\cb4 \
\cb3 \'a0\'a0
\f1\b0 Result\'a0:=\'a0FindWindow('ProgMan',\'a0
\f0\b nil
\f1\b0 );\
\'a0\'a0Result\'a0:=\'a0GetWindow(Result,\'a0GW_CHILD);\
\'a0\'a0Result\'a0:=\'a0GetWindow(Result,\'a0GW_CHILD);\
\'a0\'a0SetLength(S,\'a040);\
\'a0\'a0GetClassName(Result,\'a0PChar(S),\'a039);\
\'a0\'a0
\f0\b if\'a0
\f1\b0 PChar(S)\'a0<>\'a0'SysListView32'\'a0
\f0\b then\'a0
\f1\b0 Result\'a0:=\'a00;\

\f0\b end
\f1\b0 ;\
\

\f0\b procedure\'a0
\f1\b0 TForm1.Button1Click(Sender:\'a0TObject);\
\'a0
\f0\b type\cb4 \
\cb3 \'a0\'a0\'a0
\f1\b0 PInfo\'a0=\'a0^TInfo;\
\'a0\'a0\'a0TInfo\'a0=\'a0
\f0\b packed\'a0record\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0
\f1\b0 infoPoint:\'a0TPoint;\
\'a0\'a0\'a0\'a0\'a0infoText:\'a0
\f0\b array
\f1\b0 [0..255]\'a0
\f0\b of\'a0
\f1\b0 Char;\
\'a0\'a0\'a0\'a0\'a0infoItem:\'a0TLVItem;\
\'a0\'a0\'a0\'a0\'a0infoFindInfo:\'a0TLVFindInfo;\
\'a0\'a0\'a0
\f0\b end
\f1\b0 ;\

\f0\b var\cb4 \
\cb3 \'a0\'a0\'a0
\f1\b0 r\'a0:\'a0TRect;\
\'a0\'a0\'a0hWnd\'a0:\'a0THandle;\
\'a0\'a0\'a0i,\'a0iCount\'a0:\'a0Integer;\
\
\'a0\'a0\'a0Info:\'a0PInfo;\
\'a0\'a0\'a0SharedMem:\'a0TSharedMem;\

\f0\b begin\cb4 \
\cb3 \'a0\'a0
\f1\b0 hWnd\'a0:=\'a0GetDesktopWindow();\
\'a0\'a0GetWindowRect(hWnd,r);\
\'a0\'a0Memo.Lines.Add('Bottom:\'a0'\'a0+\'a0\'a0IntToStr(r.Bottom));\
\'a0\'a0Memo.Lines.Add('Right:\'a0'\'a0+\'a0IntToStr(r.Right));\
\
\'a0\'a0hWnd\'a0:=\'a0GetDesktopListViewHandle;\
\'a0\'a0iCount\'a0:=\'a0ListView_GetItemCount(hWnd);\
\'a0\'a0Memo.Lines.Add('#\'a0Icons:\'a0'\'a0+\'a0IntToStr(iCount));\
\
\'a0\'a0SharedMem\'a0:=\'a0TSharedMem.Create('',\'a0SizeOf(TInfo));\
\'a0\'a0Info\'a0:=\'a0SharedMem.Buffer;\
\
\'a0\'a0\'a0
\f0\b with\'a0
\f1\b0 Info^\'a0
\f0\b do\cb4 \
\cb3 \'a0\'a0\'a0try\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0
\f1\b0 infoItem.pszText\'a0:=\'a0infoText;\
\'a0\'a0\'a0\'a0\'a0infoItem.cchTextMax\'a0:=\'a0255;\
\'a0\'a0\'a0\'a0\'a0infoItem.mask\'a0:=\'a0LVIF_TEXT;\
\'a0\'a0\'a0\'a0\'a0
\f0\b try\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0\'a0\'a0begin\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for\'a0
\f1\b0 i\'a0:=\'a00\'a0
\f0\b to\'a0
\f1\b0 iCount\'a0-\'a01\'a0
\f0\b do\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0begin\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b0 infoItem.iItem\'a0:=\'a0i;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b try\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b0 ListView_GetItem(hWnd,\'a0infoItem);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0ListView_GetItemPosition(hWnd,\'a0I,\'a0infoPoint);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Memo.Lines.Add('Icon:\'a0'\'a0+\'a0infoText);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Memo.Lines.Add('\'a0\'a0\'a0X:\'a0'\'a0+\'a0IntToStr(infoPoint.X));\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Memo.Lines.Add('\'a0\'a0\'a0Y:\'a0'\'a0+\'a0IntToStr(infoPoint.Y));\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b except\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0end
\f1\b0 ;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b end
\f1\b0 ;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b end
\f1\b0 ;\
\'a0\'a0\'a0\'a0\'a0
\f0\b finally\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0end
\f1\b0 ;\
\'a0\'a0\'a0
\f0\b finally\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0
\f1\b0 SharedMem.Free;\
\'a0\'a0\'a0
\f0\b end
\f1\b0 ;\

\f0\b end
\f1\b0 ;\
\
\pard\pardeftab720\sl220\partightenfactor0

\f2\i \cf5 //\'a0For\'a0NT,\'a0Win2k,\'a0XP:\cb4 \
\cb3 //-------------------------------------------\cb4 \
\cb3 //\'a0Unit\'a0to\'a0save/restore\'a0the\'a0positions\'a0of\'a0desktop\'a0icons\'a0to/from\'a0the\'a0registry)\cb4 \
\
\pard\pardeftab720\sl220\partightenfactor0

\f0\i0\b \cf2 \cb3 unit\'a0
\f1\b0 dipsdef;\
\

\f0\b interface\cb4 \
\
\cb3 uses\cb4 \
\cb3 \'a0\'a0
\f1\b0 Windows,\'a0CommCtrl;\
\

\f0\b const\cb4 \
\cb3 \'a0\'a0
\f1\b0 RegSubKeyName\'a0=\'a0'Software\\LVT\\Desktop\'a0Item\'a0Position\'a0Saver';\
\

\f0\b procedure\'a0
\f1\b0 RestoreDesktopItemPositions;\

\f0\b procedure\'a0
\f1\b0 SaveDesktopItemPositions;\
\

\f0\b implementation\cb4 \
\
\cb3 uses\cb4 \
\cb3 \'a0\'a0
\f1\b0 uvirtalloc,\'a0registry;\
\

\f0\b procedure\'a0
\f1\b0 SaveListItemPosition(LVH\'a0:\'a0THandle;\'a0RemoteAddr\'a0:\'a0Pointer);\

\f0\b var\cb4 \
\cb3 \'a0\'a0
\f1\b0 lvi\'a0:\'a0TLVITEM;\
\'a0\'a0lenlvi\'a0:\'a0integer;\
\'a0\'a0nb\'a0:\'a0integer;\
\'a0\'a0buffer\'a0:\'a0
\f0\b array\'a0
\f1\b0 [0..MAX_PATH]\'a0
\f0\b of\'a0
\f1\b0 char;\
\'a0\'a0Base\'a0:\'a0Pointer;\
\'a0\'a0Base2\'a0:\'a0PByte;\
\'a0\'a0i,\'a0ItemsCount\'a0:\'a0integer;\
\'a0\'a0Apoint\'a0:\'a0TPoint;\
\'a0\'a0key\'a0:\'a0HKEY;\
\'a0\'a0Dummy\'a0:\'a0integer;\

\f0\b begin\cb4 \
\cb3 \'a0\'a0
\f1\b0 ItemsCount\'a0:=\'a0SendMessage(LVH,\'a0LVM_GETITEMCOUNT,\'a00,\'a00);\
\'a0\'a0Base\'a0:=\'a0RemoteAddr;\
\'a0\'a0lenlvi\'a0:=\'a0SizeOf(lvi);\
\'a0\'a0FillChar(lvi,\'a0lenlvi,\'a00);\
\'a0\'a0lvi.cchTextMax\'a0:=\'a0255;\
\'a0\'a0lvi.pszText\'a0:=\'a0Base;\
\'a0\'a0inc(lvi.pszText,\'a0lenlvi);\
\
\'a0\'a0WriteToRemoteBuffer(@lvi,\'a0Base,\'a0255);\
\
\'a0\'a0Base2\'a0:=\'a0Base;\
\'a0\'a0inc(Base2,\'a0Lenlvi);\
\
\'a0\'a0RegDeleteKey(HKEY_CURRENT_USER,\'a0RegSubKeyName);\
\
\'a0\'a0RegCreateKeyEx(HKEY_CURRENT_USER,\
\'a0\'a0\'a0\'a0PChar(RegSUbKeyName),\
\'a0\'a0\'a0\'a00,\
\'a0\'a0\'a0\'a0
\f0\b nil
\f1\b0 ,\
\'a0\'a0\'a0\'a0REG_OPTION_NON_VOLATILE,\
\'a0\'a0\'a0\'a0KEY_SET_VALUE,\
\'a0\'a0\'a0\'a0
\f0\b nil
\f1\b0 ,\
\'a0\'a0\'a0\'a0key,\
\'a0\'a0\'a0\'a0
\f0\b nil
\f1\b0 );\
\
\'a0\'a0
\f0\b for\'a0
\f1\b0 i\'a0:=\'a00\'a0
\f0\b to\'a0
\f1\b0 ItemsCount\'a0-\'a01\'a0
\f0\b do\cb4 \
\cb3 \'a0\'a0begin\cb4 \
\cb3 \'a0\'a0\'a0\'a0
\f1\b0 nb\'a0:=\'a0SendMessage(LVH,\'a0LVM_GETITEMTEXT,\'a0i,\'a0LParam(Base));\
\
\'a0\'a0\'a0\'a0ReadRemoteBuffer(Base2,\'a0@buffer,\'a0nb\'a0+\'a01);\
\'a0\'a0\'a0\'a0FillChar(Apoint,\'a0SizeOf(Apoint),\'a00);\
\
\'a0\'a0\'a0\'a0WriteToRemoteBuffer(@APoint,\'a0Base2,\'a0SizeOf(Apoint));\
\'a0\'a0\'a0\'a0SendMessage(LVH,\'a0LVM_GETITEMPOSITION,\'a0i,\'a0LParam(Base)\'a0+\'a0lenlvi);\
\
\'a0\'a0\'a0\'a0ReadRemoteBuffer(Base2,\'a0@Apoint,\'a0SizeOf(Apoint));\
\'a0\'a0\'a0\'a0RegSetValueEx(key,\'a0@buffer,\'a00,\'a0REG_BINARY,\'a0@Apoint,\'a0SizeOf(APoint));\
\'a0\'a0
\f0\b end
\f1\b0 ;\
\'a0\'a0RegCloseKey(key);\

\f0\b end
\f1\b0 ;\
\
\

\f0\b procedure\'a0
\f1\b0 RestoreListItemPosition(LVH\'a0:\'a0THandle;\'a0RemoteAddr\'a0:\'a0Pointer);\

\f0\b type\cb4 \
\cb3 \'a0\'a0
\f1\b0 TInfo\'a0=\'a0
\f0\b packed\'a0record\cb4 \
\cb3 \'a0\'a0\'a0\'a0
\f1\b0 lvfi\'a0:\'a0TLVFindInfo;\
\'a0\'a0\'a0\'a0Name\'a0:\'a0
\f0\b array\'a0
\f1\b0 [0..MAX_PATH]\'a0
\f0\b of\'a0
\f1\b0 char;\
\'a0\'a0
\f0\b end
\f1\b0 ;\

\f0\b var\cb4 \
\cb3 \'a0\'a0
\f1\b0 SaveStyle\'a0:\'a0Dword;\
\'a0\'a0Base\'a0:\'a0Pointer;\
\'a0\'a0Apoint\'a0:\'a0TPoint;\
\'a0\'a0key\'a0:\'a0HKey;\
\'a0\'a0idx\'a0:\'a0DWord;\
\'a0\'a0info\'a0:\'a0TInfo;\
\'a0\'a0atype\'a0:\'a0Dword;\
\'a0\'a0cbname,\'a0cbData\'a0:\'a0Dword;\
\'a0\'a0itemidx\'a0:\'a0DWord;\

\f0\b begin\cb4 \
\cb3 \'a0\'a0
\f1\b0 SaveStyle\'a0:=\'a0GetWindowLong(LVH,\'a0GWL_STYLE);\
\'a0\'a0
\f0\b if\'a0
\f1\b0 (SaveStyle\'a0
\f0\b and\'a0
\f1\b0 LVS_AUTOARRANGE)\'a0=\'a0LVS_AUTOARRANGE\'a0
\f0\b then\cb4 \
\cb3 \'a0\'a0\'a0\'a0
\f1\b0 SetWindowLong(LVH,\'a0GWL_STYLE,\'a0SaveStyle\'a0
\f0\b xor\'a0
\f1\b0 LVS_AUTOARRANGE);\
\
\'a0\'a0RegOpenKeyEx(HKEY_CURRENT_USER,\'a0RegSubKeyName,\'a00,\'a0KEY_QUERY_VALUE,\'a0key);\
\
\'a0\'a0FillChar(info,\'a0SizeOf(info),\'a00);\
\'a0\'a0Base\'a0:=\'a0RemoteAddr;\
\
\'a0\'a0idx\'a0:=\'a00;\
\'a0\'a0cbname\'a0:=\'a0MAX_PATH;\
\'a0\'a0cbdata\'a0:=\'a0SizeOf(APoint);\
\
\'a0\'a0
\f0\b while\'a0
\f1\b0 (RegEnumValue(key,\'a0idx,\'a0info.Name,\'a0cbname,\'a0
\f0\b nil
\f1\b0 ,\'a0@atype,\'a0@Apoint,\'a0@cbData)\'a0<>\
\'a0\'a0\'a0\'a0ERROR_NO_MORE_ITEMS)\'a0
\f0\b do\cb4 \
\cb3 \'a0\'a0begin\cb4 \
\cb3 \'a0\'a0\'a0\'a0if\'a0
\f1\b0 (atype\'a0=\'a0REG_BINARY)\'a0
\f0\b and\'a0
\f1\b0 (cbData\'a0=\'a0SizeOf(Apoint))\'a0
\f0\b then\cb4 \
\cb3 \'a0\'a0\'a0\'a0begin\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0\'a0
\f1\b0 info.lvfi.flags\'a0:=\'a0LVFI_STRING;\
\'a0\'a0\'a0\'a0\'a0\'a0info.lvfi.psz\'a0:=\'a0Base;\
\'a0\'a0\'a0\'a0\'a0\'a0inc(info.lvfi.psz,\'a0SizeOf(info.lvfi));\
\'a0\'a0\'a0\'a0\'a0\'a0WriteToRemoteBuffer(@info,\'a0Base,\'a0SizeOf(info.lvfi)\'a0+\'a0cbname\'a0+\'a01);\
\'a0\'a0\'a0\'a0\'a0\'a0itemidx\'a0:=\'a0SendMessage(LVH,\'a0LVM_FINDITEM,\'a0-\'a01,\'a0LParam(Base));\
\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b if\'a0
\f1\b0 itemidx\'a0>\'a0-1\'a0
\f0\b then\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b0 SendMessage(LVH,\'a0LVM_SETITEMPOSITION,\'a0itemidx,\'a0MakeLong(Apoint.x,\'a0Apoint.y));\
\'a0\'a0\'a0\'a0
\f0\b end
\f1\b0 ;\
\'a0\'a0\'a0\'a0inc(idx);\
\'a0\'a0\'a0\'a0cbname\'a0:=\'a0MAX_PATH;\
\'a0\'a0\'a0\'a0cbdata\'a0:=\'a0SizeOf(APoint);\
\'a0\'a0
\f0\b end
\f1\b0 ;\
\'a0\'a0RegCloseKey(key);\
\
\'a0\'a0SetWindowLong(LVH,\'a0GWL_STYLE,\'a0SaveStyle);\

\f0\b end
\f1\b0 ;\
\

\f0\b function\'a0
\f1\b0 GetSysListView32:\'a0THandle;\

\f0\b begin\cb4 \
\cb3 \'a0\'a0
\f1\b0 Result\'a0:=\'a0FindWindow('Progman',\'a0
\f0\b nil
\f1\b0 );\
\'a0\'a0Result\'a0:=\'a0FindWindowEx(Result,\'a00,\'a0
\f0\b nil
\f1\b0 ,\'a0
\f0\b nil
\f1\b0 );\
\'a0\'a0Result\'a0:=\'a0FindWindowEx(Result,\'a00,\'a0
\f0\b nil
\f1\b0 ,\'a0
\f0\b nil
\f1\b0 );\

\f0\b end
\f1\b0 ;\
\

\f0\b procedure\'a0
\f1\b0 SaveDesktopItemPositions;\

\f0\b var\cb4 \
\cb3 \'a0\'a0
\f1\b0 pid\'a0:\'a0integer;\
\'a0\'a0rembuffer\'a0:\'a0PByte;\
\'a0\'a0hTarget\'a0:\'a0THandle;\

\f0\b begin\cb4 \
\cb3 \'a0\'a0
\f1\b0 hTarget\'a0:=\'a0GetSysListView32;\
\'a0\'a0GetWindowThreadProcessId(hTarget,\'a0@pid);\
\'a0\'a0
\f0\b if\'a0
\f1\b0 (hTarget\'a0=\'a00)\'a0
\f0\b or\'a0
\f1\b0 (pid\'a0=\'a00)\'a0
\f0\b then\cb4 \
\cb3 \'a0\'a0\'a0\'a0
\f1\b0 Exit;\
\'a0\'a0rembuffer\'a0:=\'a0CreateRemoteBuffer(pid,\'a0$FFF);\
\'a0\'a0
\f0\b if\'a0
\f1\b0 Assigned(rembuffer)\'a0
\f0\b then\cb4 \
\cb3 \'a0\'a0begin\cb4 \
\cb3 \'a0\'a0\'a0\'a0
\f1\b0 SaveListItemPosition(hTarget,\'a0rembuffer);\
\'a0\'a0\'a0\'a0DestroyRemoteBuffer;\
\'a0\'a0
\f0\b end
\f1\b0 ;\

\f0\b end
\f1\b0 ;\
\

\f0\b procedure\'a0
\f1\b0 RestoreDesktopItemPositions;\

\f0\b var\cb4 \
\cb3 \'a0\'a0
\f1\b0 hTarget\'a0:\'a0THandle;\
\'a0\'a0pid\'a0:\'a0DWord;\
\'a0\'a0rembuffer\'a0:\'a0PByte;\

\f0\b begin\cb4 \
\cb3 \'a0\'a0
\f1\b0 hTarget\'a0:=\'a0GetSysListView32;\
\'a0\'a0GetWindowThreadProcessId(hTarget,\'a0@pid);\
\'a0\'a0
\f0\b if\'a0
\f1\b0 (hTarget\'a0=\'a00)\'a0
\f0\b or\'a0
\f1\b0 (pid\'a0=\'a00)\'a0
\f0\b then\cb4 \
\cb3 \'a0\'a0\'a0\'a0
\f1\b0 Exit;\
\'a0\'a0rembuffer\'a0:=\'a0CreateRemoteBuffer(pid,\'a0$FFF);\
\'a0\'a0
\f0\b if\'a0
\f1\b0 Assigned(rembuffer)\'a0
\f0\b then\cb4 \
\cb3 \'a0\'a0begin\cb4 \
\cb3 \'a0\'a0\'a0\'a0
\f1\b0 RestoreListItemPosition(hTarget,\'a0rembuffer);\
\'a0\'a0\'a0\'a0DestroyRemoteBuffer;\
\'a0\'a0
\f0\b end
\f1\b0 ;\

\f0\b end
\f1\b0 ;\
\

\f0\b end
\f1\b0 .\
\
\pard\pardeftab720\sl220\partightenfactor0

\f2\i \cf5 \{----------------------------------------------------------\}\cb4 \
\
\pard\pardeftab720\sl220\partightenfactor0

\f0\i0\b \cf2 \cb3 unit\'a0
\f1\b0 uvirtalloc;\
\

\f0\b interface\cb4 \
\
\cb3 uses\cb4 \
\cb3 \'a0\'a0
\f1\b0 Windows,\'a0SysUtils;\
\

\f0\b function\'a0
\f1\b0 CreateRemoteBuffer(Pid\'a0:\'a0DWord;\'a0Size:\'a0Dword):\'a0PByte;\

\f0\b procedure\'a0
\f1\b0 WriteToRemoteBuffer(Source\'a0:\'a0PByte;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Dest\'a0:\'a0PByte;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Count\'a0:\'a0Dword);\
\

\f0\b function\'a0
\f1\b0 ReadRemoteBuffer\'a0(Source\'a0:\'a0PByte;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Dest\'a0:\'a0PByte;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Count\'a0:\'a0Dword):\'a0Dword;\
\

\f0\b procedure\'a0
\f1\b0 DestroyRemoteBuffer;\
\

\f0\b implementation\cb4 \
\
\cb3 var\cb4 \
\cb3 \'a0\'a0
\f1\b0 hProcess\'a0:\'a0THandle;\
\'a0\'a0RemoteBufferAddr:\'a0PByte;\
\'a0\'a0BuffSize\'a0:\'a0DWord;\
\

\f0\b function\'a0
\f1\b0 CreateRemoteBuffer;\

\f0\b begin\cb4 \
\cb3 \'a0\'a0
\f1\b0 RemoteBufferAddr\'a0:=\'a0
\f0\b nil
\f1\b0 ;\
\'a0\'a0hProcess\'a0:=\'a0OpenProcess(PROCESS_ALL_ACCESS,\'a0FALSE,\'a0Pid);\
\'a0\'a0
\f0\b if\'a0
\f1\b0 (hProcess\'a0=\'a00)\'a0
\f0\b then\cb4 \
\cb3 \'a0\'a0\'a0\'a0
\f1\b0 RaiseLastWin32Error;\
\
\'a0\'a0Result\'a0:=\'a0VirtualAllocEx(hProcess,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f0\b nil
\f1\b0 ,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Size,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0MEM_COMMIT,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0PAGE_EXECUTE_READWRITE);\
\
\'a0\'a0Win32Check(Result\'a0<>\'a0
\f0\b nil
\f1\b0 );\
\'a0\'a0RemoteBufferAddr\'a0:=\'a0Result;\
\'a0\'a0BuffSize\'a0:=\'a0Size;\

\f0\b end
\f1\b0 ;\
\

\f0\b procedure\'a0
\f1\b0 WriteToRemoteBuffer;\

\f0\b var\cb4 \
\cb3 \'a0\'a0
\f1\b0 BytesWritten:\'a0Dword;\

\f0\b begin\cb4 \
\cb3 \'a0if\'a0
\f1\b0 hProcess\'a0=\'a00\'a0
\f0\b then\cb4 \
\cb3 \'a0\'a0\'a0
\f1\b0 Exit;\
\'a0Win32Check(WriteProcessMemory(hProcess,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Dest,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Source,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Count,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0BytesWritten));\

\f0\b end
\f1\b0 ;\
\

\f0\b function\'a0
\f1\b0 ReadRemoteBuffer;\

\f0\b begin\cb4 \
\cb3 \'a0\'a0
\f1\b0 Result\'a0:=\'a00;\
\'a0\'a0
\f0\b if\'a0
\f1\b0 hProcess\'a0=\'a00\'a0
\f0\b then\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0
\f1\b0 Exit;\
\
\'a0\'a0Win32Check(ReadProcessMemory(hProcess,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Source,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Dest\'a0,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Count,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Result));\

\f0\b end
\f1\b0 ;\
\

\f0\b procedure\'a0
\f1\b0 DestroyRemoteBuffer;\

\f0\b begin\cb4 \
\cb3 \'a0\'a0\'a0if\'a0
\f1\b0 (hProcess\'a0>\'a00)\'a0\'a0
\f0\b then\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0begin\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0\'a0\'a0if\'a0
\f1\b0 Assigned(RemoteBufferAddr)\'a0
\f0\b then\cb4 \
\cb3 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b0 Win32Check(Boolean(VirtualFreeEx(hProcess,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0RemoteBufferAddr,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a00,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0MEM_RELEASE)));\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0CloseHandle(hProcess);\
\'a0\'a0\'a0\'a0\'a0
\f0\b end
\f1\b0 ;\

\f0\b end
\f1\b0 ;\
\

\f0\b end}